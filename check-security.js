#!/usr/bin/env node

// Script de v√©rification de s√©curit√© pour MyDiary Secure
// Usage: node check-security.js

const fs = require("fs");
const path = require("path");

console.log("üîç V√©rification de s√©curit√© MyDiary Secure...\n");

const checks = {
  passed: 0,
  failed: 0,
  warnings: 0,
};

// Fonction utilitaire pour les logs color√©s
const log = {
  success: (msg) => console.log(`‚úÖ ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
  warning: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
};

// 1. V√©rifier que .env existe
function checkEnvFile() {
  log.info("V√©rification du fichier .env...");

  if (fs.existsSync(".env")) {
    log.success("Fichier .env trouv√©");
    checks.passed++;

    // V√©rifier le contenu
    const envContent = fs.readFileSync(".env", "utf8");
    if (
      envContent.includes("SUPABASE_URL=") &&
      envContent.includes("SUPABASE_ANON_KEY=")
    ) {
      log.success("Variables Supabase configur√©es dans .env");
      checks.passed++;
    } else {
      log.error("Variables Supabase manquantes dans .env");
      checks.failed++;
    }
  } else {
    log.warning("Fichier .env non trouv√© - cr√©ez-le depuis .env.example");
    checks.warnings++;
  }
}

// 2. V√©rifier que .env.example existe
function checkEnvExample() {
  log.info("V√©rification du fichier .env.example...");

  if (fs.existsSync(".env.example")) {
    log.success("Fichier .env.example trouv√©");
    checks.passed++;
  } else {
    log.error("Fichier .env.example manquant");
    checks.failed++;
  }
}

// 3. V√©rifier .gitignore
function checkGitignore() {
  log.info("V√©rification du fichier .gitignore...");

  if (fs.existsSync(".gitignore")) {
    const gitignoreContent = fs.readFileSync(".gitignore", "utf8");
    if (gitignoreContent.includes(".env")) {
      log.success(".env est ignor√© par Git");
      checks.passed++;
    } else {
      log.error(".env n'est PAS ignor√© par Git - DANGER !");
      checks.failed++;
    }
  } else {
    log.error("Fichier .gitignore manquant");
    checks.failed++;
  }
}

// 4. Rechercher des cl√©s hardcod√©es dans le code
function checkHardcodedKeys() {
  log.info("Recherche de cl√©s hardcod√©es...");

  const filesToCheck = [
    "js/supabase-config.js",
    "js/env-loader.js",
    "index.html",
  ];

  let foundKeys = false;

  filesToCheck.forEach((file) => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, "utf8");

      // Rechercher des patterns de cl√©s Supabase
      const patterns = [
        /https:\/\/[a-z]+\.supabase\.co/g,
        /eyJhbGciOiJIUzI1NiI[A-Za-z0-9+/=]+/g,
      ];

      patterns.forEach((pattern) => {
        const matches = content.match(pattern);
        if (matches && matches.length > 0) {
          // V√©rifier si c'est dans un commentaire ou une fonction de fallback
          const lines = content.split("\n");
          matches.forEach((match) => {
            const lineIndex = lines.findIndex((line) => line.includes(match));
            if (lineIndex !== -1) {
              const line = lines[lineIndex].trim();
              if (
                line.includes("fallback") ||
                line.includes("test") ||
                line.includes("//")
              ) {
                log.warning(
                  `Cl√© de fallback trouv√©e dans ${file}:${lineIndex + 1}`
                );
                checks.warnings++;
              } else {
                log.error(
                  `Cl√© hardcod√©e trouv√©e dans ${file}:${lineIndex + 1}`
                );
                foundKeys = true;
                checks.failed++;
              }
            }
          });
        }
      });
    }
  });

  if (!foundKeys && checks.failed === 0) {
    log.success("Aucune cl√© hardcod√©e trouv√©e");
    checks.passed++;
  }
}

// 5. V√©rifier la structure des fichiers de s√©curit√©
function checkSecurityFiles() {
  log.info("V√©rification des fichiers de s√©curit√©...");

  const securityFiles = ["SECURITY.md", "js/env-loader.js"];

  securityFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      log.success(`${file} trouv√©`);
      checks.passed++;
    } else {
      log.error(`${file} manquant`);
      checks.failed++;
    }
  });
}

// 6. V√©rifier la configuration Git
function checkGitConfig() {
  log.info("V√©rification de la configuration Git...");

  try {
    const { execSync } = require("child_process");

    // V√©rifier si .env est track√©
    try {
      const trackedFiles = execSync("git ls-files", { encoding: "utf8" });
      if (trackedFiles.includes(".env")) {
        log.error(".env est track√© par Git - SUPPRIMEZ-LE IMM√âDIATEMENT !");
        checks.failed++;
      } else {
        log.success(".env n'est pas track√© par Git");
        checks.passed++;
      }
    } catch (e) {
      log.warning("Impossible de v√©rifier les fichiers Git track√©s");
      checks.warnings++;
    }
  } catch (e) {
    log.warning("Git non disponible ou pas un repo Git");
    checks.warnings++;
  }
}

// Ex√©cuter toutes les v√©rifications
function runAllChecks() {
  checkEnvFile();
  console.log();

  checkEnvExample();
  console.log();

  checkGitignore();
  console.log();

  checkHardcodedKeys();
  console.log();

  checkSecurityFiles();
  console.log();

  checkGitConfig();
  console.log();
}

// Afficher le r√©sum√©
function showSummary() {
  console.log("üìä R√âSUM√â DE S√âCURIT√â");
  console.log("=".repeat(50));
  console.log(`‚úÖ Tests r√©ussis: ${checks.passed}`);
  console.log(`‚ùå Tests √©chou√©s: ${checks.failed}`);
  console.log(`‚ö†Ô∏è  Avertissements: ${checks.warnings}`);
  console.log();

  if (checks.failed === 0) {
    console.log("üéâ S√âCURIT√â OK - Pr√™t pour GitHub !");
    process.exit(0);
  } else {
    console.log("üö® PROBL√àMES DE S√âCURIT√â D√âTECT√âS !");
    console.log("Corrigez les erreurs avant de publier sur GitHub.");
    process.exit(1);
  }
}

// Actions de correction automatique
function showFixSuggestions() {
  if (checks.failed > 0) {
    console.log("\nüîß SUGGESTIONS DE CORRECTION :");
    console.log("1. Cr√©er .env depuis .env.example : cp .env.example .env");
    console.log('2. Ajouter .env au .gitignore : echo ".env" >> .gitignore');
    console.log("3. Supprimer .env du tracking Git : git rm --cached .env");
    console.log(
      "4. Remplacer les cl√©s hardcod√©es par des variables d'environnement"
    );
    console.log("5. Relancer la v√©rification : node check-security.js");
  }
}

// Ex√©cution principale
runAllChecks();
showSummary();
showFixSuggestions();
